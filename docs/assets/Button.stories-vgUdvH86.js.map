{"version":3,"file":"Button.stories-vgUdvH86.js","sources":["../../src/components/button/Button.vue"],"sourcesContent":["<template>\r\n  <button\r\n    class=\"button\"\r\n    :class=\"[\r\n      props.size,\r\n      props.color,\r\n      {\r\n        'is-responsive': props.responsive,\r\n        'is-fullwidth': props.expanded,\r\n        'is-rounded': rounded,\r\n        'is-loading': loading,\r\n        'is-outlined': outlined,\r\n        'is-inverted': inverted,\r\n        'is-focused': focused,\r\n        'is-active': active,\r\n        'is-hovered': hovered,\r\n        'is-selected': selected\r\n        }\r\n    ]\"\r\n    :disabled=\"props.disabled\"\r\n  >\r\n    <span v-if=\"iconLeft\" class=\"icon\" :class=\"[props.size]\">\r\n      <i class=\"fab fa-github\"></i>\r\n    </span>\r\n    <slot>\r\n      <span v-if=\"props.label\">{{ props.label }}</span>\r\n    </slot>\r\n    <span v-if=\"iconRight\" class=\"icon\" :class=\"[props.size]\">\r\n      <i class=\"fab fa-github\"></i>\r\n    </span>\r\n  </button>\r\n</template>\r\n\r\n<script lang=\"ts\" setup>\r\nimport { defineProps, PropType } from 'vue';\r\n\r\nconst props = defineProps({\r\n  label: {\r\n    type: String as PropType<String | undefined>,\r\n  },\r\n  disabled: {\r\n    type: Boolean,\r\n    default: false,\r\n  },\r\n  expanded: {\r\n    type: Boolean,\r\n    default: false,\r\n  },\r\n  rounded: {\r\n    type: Boolean,\r\n    default: false,\r\n  },\r\n  loading: {\r\n    type: Boolean,\r\n    default: false,\r\n  },\r\n  outlined: {\r\n    type: Boolean,\r\n    default: false,\r\n  },\r\n  inverted: {\r\n    type: Boolean,\r\n    default: false,\r\n  },\r\n  focused: {\r\n    type: Boolean,\r\n    default: false,\r\n  },\r\n  active: {\r\n    type: Boolean,\r\n    default: false,\r\n  },\r\n  hovered: {\r\n    type: Boolean,\r\n    default: false,\r\n  },\r\n  selected: {\r\n    type: Boolean,\r\n    default: false,\r\n  },\r\n  /** \r\n   * If you want different button sizes for each breakpoint, you can use Bulma's responsive buttons\r\n  */\r\n  responsive: {\r\n    type: Boolean,\r\n    default: false,\r\n  },\r\n  /**\r\n   * The button comes in 4 different sizes: small, normal, medium, large.\r\n   * While the default size is the normal one, the is-normal modifier exists in case you need to reset the button to its normal size.\r\n   * @values small, normal, medium, large\r\n   * @version 1.0.5\r\n   */\r\n  size: {\r\n    type: String as PropType<'is-small' | 'is-normal' | 'is-medium' | 'is-large'>,\r\n    default: 'is-normal',\r\n  },\r\n  color: {\r\n    type: String as PropType<'primary' | 'secondary'>,\r\n    default: 'primary',\r\n  },\r\n  iconRight: String,\r\n  iconLeft: String,\r\n  type: {\r\n      type: String as PropType<'button' | 'submit' | 'reset'>,\r\n      default: 'button',\r\n      validator: (value: string) => {\r\n          return [\r\n            'button',\r\n            'submit',\r\n            'reset'\r\n          ].includes(value)\r\n      }\r\n  },\r\n  tag: {\r\n      type: String as PropType<'a' | 'button' | 'input' | 'router-link' | 'nuxt-link' | 'n-link' | 'RouterLink' | 'NuxtLink' | 'NLink'>,\r\n      default: 'button',\r\n      validator: (value: string) => {\r\n          return [\r\n            'a',\r\n            'button',\r\n            'input',\r\n            'router-link',\r\n            'nuxt-link',\r\n            'n-link',\r\n            'RouterLink',\r\n            'NuxtLink',\r\n            'NLink'\r\n          ].includes(value)\r\n      }\r\n  }\r\n});\r\n</script>\r\n"],"names":["props","__props"],"mappings":"q/BAoCA,MAAMA,EAAQC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;"}